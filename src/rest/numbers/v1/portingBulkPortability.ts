/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export type PortingBulkPortabilityStatus =
  | "in-progress"
  | "completed"
  | "expired";

/**
 * Options to pass to create a PortingBulkPortabilityInstance
 */
export interface PortingBulkPortabilityListInstanceCreateOptions {
  /** The phone numbers which portability is to be checked. This should be a list of strings. Phone numbers are in E.164 format (e.g. +16175551212). . */
  phoneNumbers: Array<string>;
}

export interface PortingBulkPortabilityContext {
  /**
   * Fetch a PortingBulkPortabilityInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingBulkPortabilityInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: PortingBulkPortabilityInstance
    ) => any
  ): Promise<PortingBulkPortabilityInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PortingBulkPortabilityContextSolution {
  sid: string;
}

export class PortingBulkPortabilityContextImpl
  implements PortingBulkPortabilityContext
{
  protected _solution: PortingBulkPortabilityContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Porting/Portability/${sid}`;
  }

  fetch(
    callback?: (
      error: Error | null,
      item?: PortingBulkPortabilityInstance
    ) => any
  ): Promise<PortingBulkPortabilityInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PortingBulkPortabilityInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PortingBulkPortabilityPayload
  extends PortingBulkPortabilityResource {}

interface PortingBulkPortabilityResource {
  sid: string;
  status: PortingBulkPortabilityStatus;
  datetime_created: Date;
  phone_numbers: Array<any>;
  url: string;
}

export class PortingBulkPortabilityInstance {
  protected _solution: PortingBulkPortabilityContextSolution;
  protected _context?: PortingBulkPortabilityContext;

  constructor(
    protected _version: V1,
    payload: PortingBulkPortabilityResource,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.status = payload.status;
    this.datetimeCreated = deserialize.iso8601DateTime(
      payload.datetime_created
    );
    this.phoneNumbers = payload.phone_numbers;
    this.url = payload.url;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * A 34 character string that uniquely identifies this Portability check.
   */
  sid: string;
  status: PortingBulkPortabilityStatus;
  /**
   * The date that the Portability check was created, given in ISO 8601 format.
   */
  datetimeCreated: Date;
  /**
   * Contains a list with all the information of the requested phone numbers. Each phone number contains the following properties: `phone_number`: The phone number which portability is to be checked. `portable`: Boolean flag specifying if phone number is portable or not. `not_portable_reason`: Reason why the phone number cannot be ported into Twilio, `null` otherwise. `not_portable_reason_code`: The Portability Reason Code for the phone number if it cannot be ported in Twilio, `null` otherwise. `pin_and_account_number_required`: Boolean flag specifying if PIN and account number is required for the phone number. `number_type`: The type of the requested phone number. `country` Country the phone number belongs to. `messaging_carrier` Current messaging carrier of the phone number. `voice_carrier` Current voice carrier of the phone number.
   */
  phoneNumbers: Array<any>;
  /**
   * This is the url of the request that you\'re trying to reach out to locate the resource.
   */
  url: string;

  private get _proxy(): PortingBulkPortabilityContext {
    this._context =
      this._context ||
      new PortingBulkPortabilityContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a PortingBulkPortabilityInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingBulkPortabilityInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: PortingBulkPortabilityInstance
    ) => any
  ): Promise<PortingBulkPortabilityInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      status: this.status,
      datetimeCreated: this.datetimeCreated,
      phoneNumbers: this.phoneNumbers,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PortingBulkPortabilitySolution {}

export interface PortingBulkPortabilityListInstance {
  _version: V1;
  _solution: PortingBulkPortabilitySolution;
  _uri: string;

  (sid: string): PortingBulkPortabilityContext;
  get(sid: string): PortingBulkPortabilityContext;

  /**
   * Create a PortingBulkPortabilityInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingBulkPortabilityInstance
   */
  create(
    params: PortingBulkPortabilityListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      item?: PortingBulkPortabilityInstance
    ) => any
  ): Promise<PortingBulkPortabilityInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PortingBulkPortabilityListInstance(
  version: V1
): PortingBulkPortabilityListInstance {
  const instance = ((sid) =>
    instance.get(sid)) as PortingBulkPortabilityListInstance;

  instance.get = function get(sid): PortingBulkPortabilityContext {
    return new PortingBulkPortabilityContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Porting/Portability`;

  instance.create = function create(
    params: PortingBulkPortabilityListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      items: PortingBulkPortabilityInstance
    ) => any
  ): Promise<PortingBulkPortabilityInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (
      params["phoneNumbers"] === null ||
      params["phoneNumbers"] === undefined
    ) {
      throw new Error("Required parameter \"params['phoneNumbers']\" missing.");
    }

    let data: any = {};

    data["PhoneNumbers"] = serialize.map(
      params["phoneNumbers"],
      (e: string) => e
    );

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new PortingBulkPortabilityInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
