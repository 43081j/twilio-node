/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a ModuleDataManagementInstance
 */
export interface ModuleDataManagementContextUpdateOptions {
  /**  */
  moduleInfo?: string;
  /**  */
  description?: string;
  /**  */
  documentation?: string;
  /**  */
  policies?: string;
  /**  */
  support?: string;
}

export interface ModuleDataManagementContext {
  /**
   * Fetch a ModuleDataManagementInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance>;

  /**
   * Update a ModuleDataManagementInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  update(
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance>;
  /**
   * Update a ModuleDataManagementInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  update(
    params: ModuleDataManagementContextUpdateOptions,
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ModuleDataManagementContextSolution {
  sid: string;
}

export class ModuleDataManagementContextImpl
  implements ModuleDataManagementContext
{
  protected _solution: ModuleDataManagementContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Listing/${sid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ModuleDataManagementInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | ModuleDataManagementContextUpdateOptions
      | ((error: Error | null, item?: ModuleDataManagementInstance) => any),
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["moduleInfo"] !== undefined)
      data["ModuleInfo"] = params["moduleInfo"];
    if (params["description"] !== undefined)
      data["Description"] = params["description"];
    if (params["documentation"] !== undefined)
      data["Documentation"] = params["documentation"];
    if (params["policies"] !== undefined) data["Policies"] = params["policies"];
    if (params["support"] !== undefined) data["Support"] = params["support"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ModuleDataManagementInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ModuleDataManagementPayload extends ModuleDataManagementResource {}

interface ModuleDataManagementResource {
  url: string;
  sid: string;
  description: any;
  support: any;
  policies: any;
  module_info: any;
  documentation: any;
}

export class ModuleDataManagementInstance {
  protected _solution: ModuleDataManagementContextSolution;
  protected _context?: ModuleDataManagementContext;

  constructor(
    protected _version: V1,
    payload: ModuleDataManagementResource,
    sid?: string
  ) {
    this.url = payload.url;
    this.sid = payload.sid;
    this.description = payload.description;
    this.support = payload.support;
    this.policies = payload.policies;
    this.moduleInfo = payload.module_info;
    this.documentation = payload.documentation;

    this._solution = { sid: sid || this.sid };
  }

  url: string;
  sid: string;
  description: any;
  support: any;
  policies: any;
  moduleInfo: any;
  documentation: any;

  private get _proxy(): ModuleDataManagementContext {
    this._context =
      this._context ||
      new ModuleDataManagementContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a ModuleDataManagementInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ModuleDataManagementInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  update(
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance>;
  /**
   * Update a ModuleDataManagementInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataManagementInstance
   */
  update(
    params: ModuleDataManagementContextUpdateOptions,
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ModuleDataManagementInstance) => any
  ): Promise<ModuleDataManagementInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      url: this.url,
      sid: this.sid,
      description: this.description,
      support: this.support,
      policies: this.policies,
      moduleInfo: this.moduleInfo,
      documentation: this.documentation,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ModuleDataManagementSolution {}

export interface ModuleDataManagementListInstance {
  _version: V1;
  _solution: ModuleDataManagementSolution;
  _uri: string;

  (sid: string): ModuleDataManagementContext;
  get(sid: string): ModuleDataManagementContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ModuleDataManagementListInstance(
  version: V1
): ModuleDataManagementListInstance {
  const instance = ((sid) =>
    instance.get(sid)) as ModuleDataManagementListInstance;

  instance.get = function get(sid): ModuleDataManagementContext {
    return new ModuleDataManagementContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
