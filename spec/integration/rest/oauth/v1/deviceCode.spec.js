'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */
var serialize = require(
    '../../../../../lib/base/serialize');  /* jshint ignore:line */


var client;
var holodeck;

describe('DeviceCode', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid create request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var opts = {'clientSid': 'client_sid', 'scopes': ['scopes']};
      var promise = client.oauth.v1.deviceCode.create(opts);
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://oauth.twilio.com/v1/device/code';

      var values = {
        'ClientSid': 'client_sid',
        'Scopes': serialize.map(['scopes'], function(e) { return e; }),
      };
      holodeck.assertHasRequest(new Request({
          method: 'POST',
          url: url,
          data: values
      }));
    }
  );
  it('should generate valid create response',
    function(done) {
      var body = {
          'device_code': 'LiwuhE0bIhqemK6sd34tXfobVCR9yrk0',
          'user_code': 'Hkf1WaID3',
          'verification_uri': 'v1/oauth2/device/activate',
          'verification_uri_complete': 'v1/oauth2/device/activate?user_code=Hkf1WaID3',
          'expires_in': 299,
          'interval': 5
      };

      holodeck.mock(new Response(201, body));

      var opts = {'clientSid': 'client_sid', 'scopes': ['scopes']};
      var promise = client.oauth.v1.deviceCode.create(opts);
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
