'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */
var serialize = require(
    '../../../../../lib/base/serialize');  /* jshint ignore:line */


var client;
var holodeck;

describe('Campaign', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/a2p/Campaigns/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'messaging_service_sid': 'MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_created': '2021-01-27T14:47:52Z',
          'date_updated': '2021-01-27T14:47:52Z',
          'description': 'Test description for test campaing',
          'message_samples': [
              'Test_Sample_1',
              'Another_test_sample_2'
          ],
          'status': 'pending',
          'failure_reason': null,
          'use_case': 'PUBLIC_SERVICE_ANNOUNCEMENT',
          'has_embedded_links': true,
          'has_embedded_phone': false,
          'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
          'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
      };

      holodeck.mock(new Response(200, body));

      var promise = client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should treat the first each arg as a callback',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0',
              'previous_page_url': null,
              'next_page_url': null,
              'key': 'data',
              'url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0'
          },
          'data': [
              {
                  'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'messaging_service_sid': 'MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2021-01-27T14:47:52Z',
                  'date_updated': '2021-01-27T14:47:53Z',
                  'description': 'Test description for test campaing',
                  'message_samples': [
                      'Test_Sample_1',
                      'Another_test_sample_2'
                  ],
                  'status': 'pending',
                  'failure_reason': null,
                  'use_case': 'GAMBLING_SWEEPSTAKE',
                  'has_embedded_links': true,
                  'has_embedded_phone': false,
                  'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
                  'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.messaging.v1.campaigns.each(() => done());
    }
  );
  it('should treat the second arg as a callback',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0',
              'previous_page_url': null,
              'next_page_url': null,
              'key': 'data',
              'url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0'
          },
          'data': [
              {
                  'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'messaging_service_sid': 'MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2021-01-27T14:47:52Z',
                  'date_updated': '2021-01-27T14:47:53Z',
                  'description': 'Test description for test campaing',
                  'message_samples': [
                      'Test_Sample_1',
                      'Another_test_sample_2'
                  ],
                  'status': 'pending',
                  'failure_reason': null,
                  'use_case': 'GAMBLING_SWEEPSTAKE',
                  'has_embedded_links': true,
                  'has_embedded_phone': false,
                  'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
                  'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.messaging.v1.campaigns.each({pageSize: 20}, () => done());
      holodeck.assertHasRequest(new Request({
          method: 'GET',
          url: 'https://messaging.twilio.com/v1/a2p/Campaigns',
          params: {PageSize: 20},
      }));
    }
  );
  it('should find the callback in the opts object',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0',
              'previous_page_url': null,
              'next_page_url': null,
              'key': 'data',
              'url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0'
          },
          'data': [
              {
                  'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'messaging_service_sid': 'MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2021-01-27T14:47:52Z',
                  'date_updated': '2021-01-27T14:47:53Z',
                  'description': 'Test description for test campaing',
                  'message_samples': [
                      'Test_Sample_1',
                      'Another_test_sample_2'
                  ],
                  'status': 'pending',
                  'failure_reason': null,
                  'use_case': 'GAMBLING_SWEEPSTAKE',
                  'has_embedded_links': true,
                  'has_embedded_phone': false,
                  'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
                  'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.messaging.v1.campaigns.each({callback: () => done()}, () => fail('wrong callback!'));
    }
  );
  it('should generate valid list request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.campaigns.list();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://messaging.twilio.com/v1/a2p/Campaigns';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid read_full response',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0',
              'previous_page_url': null,
              'next_page_url': null,
              'key': 'data',
              'url': 'https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0'
          },
          'data': [
              {
                  'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'messaging_service_sid': 'MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2021-01-27T14:47:52Z',
                  'date_updated': '2021-01-27T14:47:53Z',
                  'description': 'Test description for test campaing',
                  'message_samples': [
                      'Test_Sample_1',
                      'Another_test_sample_2'
                  ],
                  'status': 'pending',
                  'failure_reason': null,
                  'use_case': 'GAMBLING_SWEEPSTAKE',
                  'has_embedded_links': true,
                  'has_embedded_phone': false,
                  'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
                  'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
              }
          ]
      };

      holodeck.mock(new Response(200, body));

      var promise = client.messaging.v1.campaigns.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid create request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var opts = {
        brandRegistrationSid: 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        useCase: 'use_case',
        description: 'description',
        messageSamples: ['message_samples'],
        hasEmbeddedLinks: true,
        hasEmbeddedPhone: true,
        messagingServiceSid: 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
      };
      var promise = client.messaging.v1.campaigns.create(opts);
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://messaging.twilio.com/v1/a2p/Campaigns';

      var values = {
        BrandRegistrationSid: 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        UseCase: 'use_case',
        Description: 'description',
        MessageSamples: serialize.map(['message_samples'], function(e) { return e; }),
        HasEmbeddedLinks: serialize.bool(true),
        HasEmbeddedPhone: serialize.bool(true),
        MessagingServiceSid: 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
      };
      holodeck.assertHasRequest(new Request({
          method: 'POST',
          url: url,
          data: values
      }));
    }
  );
  it('should generate valid create response',
    function(done) {
      var body = {
          'sid': 'CMdeadbeef66043a43b62be6d67c635c85',
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'messaging_service_sid': 'MG3u3kcgofdljponkatswl3ad3ev0c123u',
          'brand_registration_sid': 'BN0044409f7e067e279523808d267e2d85',
          'date_created': '2021-01-27T14:47:52Z',
          'date_updated': '2021-01-27T14:47:52Z',
          'description': 'Send marketing messages about sales and offers to opted in customers.',
          'message_samples': [
              'EXPRESS: Denim Days Event is ON',
              'LAST CHANCE: Book your next flight for just 1 (ONE) EUR'
          ],
          'status': 'pending',
          'failure_reason': null,
          'use_case': '2FA',
          'has_embedded_links': true,
          'has_embedded_phone': false,
          'url': 'https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85'
      };

      holodeck.mock(new Response(201, body));

      var opts = {
        brandRegistrationSid: 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        useCase: 'use_case',
        description: 'description',
        messageSamples: ['message_samples'],
        hasEmbeddedLinks: true,
        hasEmbeddedPhone: true,
        messagingServiceSid: 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
      };
      var promise = client.messaging.v1.campaigns.create(opts);
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid remove request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/a2p/Campaigns/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'DELETE',
        url: url
      }));
    }
  );
  it('should generate valid delete response',
    function(done) {
      var body = null;

      holodeck.mock(new Response(204, body));

      var promise = client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function(response) {
        expect(response).toBe(true);
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
