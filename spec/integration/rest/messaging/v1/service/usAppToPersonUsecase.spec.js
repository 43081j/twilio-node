'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('UsAppToPersonUsecase', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.services('MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                       .usAppToPersonUsecases.fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var messagingServiceSid = 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/Services/${messagingServiceSid}/Compliance/Usa2p/Usecases`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch_with_brand_registration_sid response',
    function(done) {
      var body = {
          'us_app_to_person_usecases': [
              {
                  'code': '2FA',
                  'name': 'Two-Factor authentication (2FA)',
                  'description': 'Two-Factor authentication, one-time use password, password reset'
              },
              {
                  'code': 'ACCOUNT_NOTIFICATION',
                  'name': 'Account Notification',
                  'description': 'All reminders, alerts, and notifications. (Examples include: flight delayed, hotel booked, appointment reminders.)'
              },
              {
                  'code': 'AGENTS_FRANCHISES',
                  'name': 'Agents and Franchises',
                  'description': 'For brands that have multiple agents, franchises or offices in the same brand vertical, but require individual localised numbers per agent/location/office.'
              },
              {
                  'code': 'CHARITY',
                  'name': 'Charity',
                  'description': 'Includes:  5013C Charity\nDoes not include: Religious organizations'
              },
              {
                  'code': 'CONVERSATIONAL',
                  'name': 'Conversational Messaging',
                  'description': 'Peer-to-peer app-based group messaging with proxy/pooled numbers (For example: GroupMe)\nSupporting personalized services and non-exposure of personal numbers for enterprise or A2P communications. (Examples include: Uber and AirBnb.)'
              },
              {
                  'code': 'CUSTOMER_CARE',
                  'name': 'Customer Care',
                  'description': 'All customer care messaging, including account management and support'
              },
              {
                  'code': 'DELIVERY_NOTIFICATION',
                  'name': 'Delivery Notification',
                  'description': 'Information about the status of the delivery of a product or service'
              },
              {
                  'code': 'EMERGENCY',
                  'name': 'Emergency',
                  'description': 'Notification services designed to support public safety / health during natural disasters, armed conflicts, pandemics and other national or regional emergencies'
              },
              {
                  'code': 'FRAUD_ALERT',
                  'name': 'Fraud Alert Messaging',
                  'description': 'Fraud alert notification'
              },
              {
                  'code': 'HIGHER_EDUCATION',
                  'name': 'Higher Education',
                  'description': 'For campaigns created on behalf of Colleges or Universities and will also include School Districts etc that fall outside of any \'free to the consumer\' messaging model'
              },
              {
                  'code': 'LOW_VOLUME',
                  'name': 'Low Volume Mixed',
                  'description': 'Low throughput, any combination of use-cases. Examples include:  test, demo accounts'
              },
              {
                  'code': 'MARKETING',
                  'name': 'Marketing',
                  'description': 'Any communication with marketing and/or promotional content'
              },
              {
                  'code': 'MIXED',
                  'name': 'Mixed',
                  'description': 'Mixed messaging reserved for specific consumer service industry'
              },
              {
                  'code': 'POLLING_VOTING',
                  'name': 'Polling and voting',
                  'description': 'Polling and voting'
              },
              {
                  'code': 'PUBLIC_SERVICE_ANNOUNCEMENT',
                  'name': 'Public Service Announcement',
                  'description': 'An informational message that is meant to raise the audience awareness about an important issue'
              },
              {
                  'code': 'SECURITY_ALERT',
                  'name': 'Security Alert',
                  'description': 'A notification that the security of a system, either software or hardware, has been compromised in some way and there is an action you need to take'
              },
              {
                  'code': 'SOCIAL',
                  'name': 'Social',
                  'description': 'Communication within or between closed communities (For example: influencers alerts)'
              },
              {
                  'code': 'SWEEPSTAKE',
                  'name': 'Sweepstake',
                  'description': 'Sweepstake'
              }
          ]
      };

      holodeck.mock(new Response(200, body));

      var promise = client.messaging.v1.services('MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                       .usAppToPersonUsecases.fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid fetch_without_brand_registration_sid response',
    function(done) {
      var body = {
          'us_app_to_person_usecases': [
              {
                  'code': '2FA',
                  'name': 'Two-Factor authentication (2FA)',
                  'description': 'Two-Factor authentication, one-time use password, password reset'
              },
              {
                  'code': 'ACCOUNT_NOTIFICATION',
                  'name': 'Account Notification',
                  'description': 'All reminders, alerts, and notifications. (Examples include: flight delayed, hotel booked, appointment reminders.)'
              },
              {
                  'code': 'AGENTS_FRANCHISES',
                  'name': 'Agents and Franchises',
                  'description': 'For brands that have multiple agents, franchises or offices in the same brand vertical, but require individual localised numbers per agent/location/office.'
              },
              {
                  'code': 'CHARITY',
                  'name': 'Charity',
                  'description': 'Includes:  5013C Charity\nDoes not include: Religious organizations'
              },
              {
                  'code': 'CONVERSATIONAL',
                  'name': 'Conversational Messaging',
                  'description': 'Peer-to-peer app-based group messaging with proxy/pooled numbers (For example: GroupMe)\nSupporting personalized services and non-exposure of personal numbers for enterprise or A2P communications. (Examples include: Uber and AirBnb.)'
              },
              {
                  'code': 'CUSTOMER_CARE',
                  'name': 'Customer Care',
                  'description': 'All customer care messaging, including account management and support'
              },
              {
                  'code': 'DELIVERY_NOTIFICATION',
                  'name': 'Delivery Notification',
                  'description': 'Information about the status of the delivery of a product or service'
              },
              {
                  'code': 'EMERGENCY',
                  'name': 'Emergency',
                  'description': 'Notification services designed to support public safety / health during natural disasters, armed conflicts, pandemics and other national or regional emergencies'
              },
              {
                  'code': 'FRAUD_ALERT',
                  'name': 'Fraud Alert Messaging',
                  'description': 'Fraud alert notification'
              },
              {
                  'code': 'HIGHER_EDUCATION',
                  'name': 'Higher Education',
                  'description': 'For campaigns created on behalf of Colleges or Universities and will also include School Districts etc that fall outside of any \'free to the consumer\' messaging model'
              },
              {
                  'code': 'LOW_VOLUME',
                  'name': 'Low Volume Mixed',
                  'description': 'Low throughput, any combination of use-cases. Examples include:  test, demo accounts'
              },
              {
                  'code': 'MARKETING',
                  'name': 'Marketing',
                  'description': 'Any communication with marketing and/or promotional content'
              },
              {
                  'code': 'MIXED',
                  'name': 'Mixed',
                  'description': 'Mixed messaging reserved for specific consumer service industry'
              },
              {
                  'code': 'POLLING_VOTING',
                  'name': 'Polling and voting',
                  'description': 'Polling and voting'
              },
              {
                  'code': 'PUBLIC_SERVICE_ANNOUNCEMENT',
                  'name': 'Public Service Announcement',
                  'description': 'An informational message that is meant to raise the audience awareness about an important issue'
              },
              {
                  'code': 'SECURITY_ALERT',
                  'name': 'Security Alert',
                  'description': 'A notification that the security of a system, either software or hardware, has been compromised in some way and there is an action you need to take'
              },
              {
                  'code': 'SOCIAL',
                  'name': 'Social',
                  'description': 'Communication within or between closed communities (For example: influencers alerts)'
              },
              {
                  'code': 'SWEEPSTAKE',
                  'name': 'Sweepstake',
                  'description': 'Sweepstake'
              }
          ]
      };

      holodeck.mock(new Response(200, body));

      var promise = client.messaging.v1.services('MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                       .usAppToPersonUsecases.fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
